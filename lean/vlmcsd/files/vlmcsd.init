#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

CONF="vlmcsd"
PROG="/usr/bin/vlmcsd"
INI="/etc/vlmcsd.ini"
PIDFILE="/var/run/vlmcsd.pid"
LOG_FILE="/var/log/vlmcsd.log"

# 获取 dnsmasq 配置路径和临时配置文件位置
get_dnsmasq_conf() {
    if [ -f /etc/openwrt_release ]; then
        DNSMASQ_UCI_CONFIG="$(uci -q show dhcp.@dnsmasq[0] | awk 'NR==1 {split($0, conf, /[.=]/); print conf[2]}')"
        if [ -f "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG" ]; then
            DNSMASQ_CONF_DIR="$(awk -F '=' '/^conf-dir=/{print $2}' "/tmp/etc/dnsmasq.conf.$DNSMASQ_UCI_CONFIG")"
        else
            DNSMASQ_CONF_DIR="/tmp/dnsmasq.d"
        fi
        DNSMASQ_VLMCSD="${DNSMASQ_CONF_DIR%*/}/dnsmasq-vlmcsd.conf"
    fi
}

# 重启计划任务服务
restart_crond() {
    crontab /etc/crontabs/root
}

# 添加或删除计划任务
manage_cron() {
    local action="$1"
    local log_day="${2:-0}"  # 默认周日清理日志

    case "$action" in
        add)
            # 删除可能存在的旧计划任务
            sed -i '/vlmcsd\.log/d' /etc/crontabs/root 2>/dev/null
            # 只有log_day在0-6之间才添加(0=周日，1-6=周一到周六)
            if [ "$log_day" -ge 0 ] && [ "$log_day" -le 6 ]; then
                # 添加计划任务
                echo "0 0 * * $log_day rm -f $LOG_FILE" >> /etc/crontabs/root
                # 重启计划任务服务
                restart_crond
            fi
            ;;
        del)
            # 删除计划任务
            if grep -q "vlmcsd\.log" /etc/crontabs/root 2>/dev/null; then
                sed -i '/vlmcsd\.log/d' /etc/crontabs/root 2>/dev/null
                # 重启计划任务服务
                restart_crond
            fi
            ;;
    esac
}

# 启动实例
start_service() {
    get_dnsmasq_conf

    # 读取配置
    config_load "$CONF"
    config_get_bool enabled "config" "enabled" "0"
    [ "$enabled" -eq 1 ] || return 1

    config_get auto_activate "config" "auto_activate" "0"
    config_get internet_access "config" "internet_access" "0"
    config_get conf "config" "conf" "0"
    config_get log "config" "log" "0"
    config_get port "config" "port" "1688"

    # 如果启用自动激活，则自动添加 DNSMasq SRV 记录
    [ "$auto_activate" -eq 1 ] && [ -n "$DNSMASQ_VLMCSD" ] && {
        local hostname
        hostname="$(uci -q get system.@system[0].hostname)"
        [ -n "$hostname" ] && echo "srv-host=_vlmcs._tcp,$hostname,$port,0,100" > "$DNSMASQ_VLMCSD"
        /etc/init.d/dnsmasq reload >/dev/null 2>&1
    }

    # 修改 INI 配置文件中的端口和日志路径
    [ "$conf" -eq 1 ] && [ -f "$INI" ] && {
        sed -i \
            -e 's/^[ \t]*\(Port.*\)/;\1/' \
            -e "s/.*\(Listen.*:\)[0-9]*/\1$port/" \
            -e "s|.*\(LogFile[ ]*=[ ]*\).*|\1$LOG_FILE|" "$INI"
    }

    # 启动 procd 管理服务
    procd_open_instance "$CONF"
    procd_set_param command "$PROG"
    procd_append_param command -D
    procd_append_param command -p "$port"
    procd_append_param command -l "$LOG_FILE"
    [ "$conf" -eq 1 ] && procd_append_param command -i "$INI"
    procd_set_param pidfile "$PIDFILE"
    [ "$conf" -eq 1 ] && procd_set_param file "$INI"
    procd_set_param respawn

    # 如开启公网访问，添加临时防火墙规则
    [ "$internet_access" -eq 1 ] && {
        procd_open_data
        json_add_array firewall
            json_add_object ""
                json_add_string type rule
                json_add_string name "Allow-vlmcsd-tcp"
                json_add_string src "*"
                json_add_string proto "tcp"
                json_add_string dest_port "$port"
                json_add_string target "ACCEPT"
            json_close_object
        json_close_array
        procd_close_data
    }

    procd_close_instance
    # 添加清理日志的计划任务
    manage_cron add "$log"
}

# 停止服务时清理配置和日志
stop_service() {
    # 终止进程
    [ -n "$PROG" ] && pidof "$PROG" >/dev/null && kill -9 $(pidof "$PROG") 2>/dev/null

    # 删除 dnsmasq 配置
    get_dnsmasq_conf

    [ -f "$DNSMASQ_VLMCSD" ] && {
        rm -f "$DNSMASQ_VLMCSD"
        /etc/init.d/dnsmasq reload >/dev/null 2>&1
    }

    # 删除清理日志的计划任务
    manage_cron del

    # 禁用服务时删除日志文件
    config_load "$CONF"

    config_get_bool enabled "config" "enabled" "0"
    [ "$enabled" -eq 0 ] && [ -f "$LOG_FILE" ] && {
        rm -f "$LOG_FILE"
        logger -t "$CONF" "Service disabled, removed log file: $LOG_FILE"
    }
}

# 重新加载服务
reload_service() {
    stop
    start
}

# 服务触发器
service_triggers() {
    procd_add_reload_trigger "$CONF"
}

